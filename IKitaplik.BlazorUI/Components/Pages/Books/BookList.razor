@page "/books/list"

@inject HttpClient httpClient
@inject ISnackbar Snackbar
@inject JwtAuthenticationStateProvider AuthProvider
@inject NavigationManager Nav


@if (error)
{
    <MudAlert Severity="Severity.Error" Class="m-4" CloseIcon="@Icons.Material.Filled.Close">
        <MudText>@errorMessage</MudText>
    </MudAlert>
}
else
{
    <MudTable Items="@Elements" Hover="true" ReadOnly="true" Filter="new Func<BookGetDTO, bool>(FilterFunc)"
              SortLabel="Sort By" CommitEditTooltip="Commit Edit">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Kitaplar</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<BookGetDTO, object>(x => x.Id)">Nr</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<BookGetDTO, object>(x => x.Barcode)">Barkod</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<BookGetDTO, object>(x => x.Name)">İsim</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<BookGetDTO, object>(x => x.WriterName)">Yazar</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<BookGetDTO, object>(x => x.CategoryName)">Kategori</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<BookGetDTO, object>(x => x.ShelfNo)">Raf No</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<BookGetDTO, object>(x => x.Piece)">Adet</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<BookGetDTO, object>(x => x.Situation)">Durum</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<BookGetDTO, object>(x => x.PageSize)">Sayfa Sayısı</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Nr">@context.Id</MudTd>
            <MudTd DataLabel="Barkod">@context.Barcode</MudTd>
            <MudTd DataLabel="İsim">@context.Name</MudTd>
            <MudTd DataLabel="Yazar">@context.WriterName</MudTd>
            <MudTd DataLabel="Kategori">@context.CategoryName</MudTd>
            <MudTd DataLabel="Raf No">@context.ShelfNo</MudTd>
            <MudTd DataLabel="Adet">@context.Piece</MudTd>
            <MudTd DataLabel="Durum">@context.Situation</MudTd>
            <MudTd DataLabel="Sayfa Sayısı">@context.PageSize</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}

@code {
    private string searchString = "", errorMessage = "";
    private IEnumerable<BookGetDTO> Elements = new List<BookGetDTO>();
    private bool error = false;


    protected override async Task OnInitializedAsync()
    {
        var token = await AuthProvider.GetToken();

        var request = new HttpRequestMessage(HttpMethod.Get, "http://localhost:5000/api/book/getall");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var res = await httpClient.SendAsync(request);

        if (res.StatusCode == HttpStatusCode.Unauthorized)
        {
            error = true;
            errorMessage = "Unauthorized access. Please log in.";
        }
        else if (res.IsSuccessStatusCode)
        {
            error = false;
            var json = await res.Content.ReadAsStringAsync();
            var result = JsonSerializer.Deserialize<Response<List<BookGetDTO>>>(json, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

            Elements = result!.Data;
        }
        else
        {
            var json = await res.Content.ReadAsStringAsync();
            var result = JsonSerializer.Deserialize<Response<List<BookGetDTO>>>(json, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

            error = true;
            errorMessage = result?.Message ?? "Error fetching data";

        }
    }

    private bool FilterFunc(BookGetDTO element)
    {
        searchString = searchString?.Trim().ToLower() ?? "";
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Name.ToLower().Contains(searchString))
            return true;
        if (element.WriterName.ToLower().Contains(searchString))
            return true;
        if ($"{element.CategoryName.ToLower()} {element.Barcode.ToString()} {element.Id}".Contains(searchString))
            return true;
        if ($"{element.Situation.ToString().ToLower()} {element.ShelfNo.ToLower()}".Contains(searchString))
            return true;
        return false;
    }
}